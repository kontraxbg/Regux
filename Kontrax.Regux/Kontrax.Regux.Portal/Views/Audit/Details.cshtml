@model Kontrax.Regux.Model.Audit.AuditViewModel

@{
    ViewBag.Title = "Събитие " + Model.Id + " от журнала";
}
<style>
    pre {
        outline: 1px solid #ccc;
        padding: 5px;
        margin: 5px;
    }

    .string {
        color: green;
    }

    .number {
        color: darkorange;
    }

    .boolean {
        color: blue;
    }

    .null {
        color: magenta;
    }

    .key {
        color: red;
    }
</style>


<table class="table table-striped table-condensed">
    <tr>
        <th>@Html.DisplayNameFor(model => model.DateTimeText)</th>
        <td>@Html.Raw(Model.DateTimeText)</td>
        <th>@Html.DisplayNameFor(model => model.AuditTypeName)</th>
        <td>@Html.DisplayFor(model => model.AuditTypeName)</td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.DurationText)</th>
        <td>@Html.DisplayFor(model => model.DurationText)</td>
        <th>@Html.DisplayNameFor(model => model.RequestMethod)</th>
        <td>@Html.DisplayFor(model => model.RequestMethod)</td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.UserName)</th>
        <td>
            @if (!string.IsNullOrEmpty(Model.UserName))
            {
                @Html.ActionLink(Model.UserName, "Edit", "UserManagement", new { id = Model.UserId }, new { target = "_blank" });
            }
            else
            {
                @("-")
            }
        </td>
        <th>@Html.DisplayNameFor(model => model.Controller)</th>
        <td>@Html.DisplayFor(model => model.Controller)</td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.IpAddress)</th>
        <td>@Html.DisplayFor(model => model.IpAddress)</td>
        <th>@Html.DisplayNameFor(model => model.Action)</th>
        <td>@Html.DisplayFor(model => model.Action)</td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.UrlAccessed)</th>
        <td colspan="3">@Html.DisplayFor(model => model.UrlAccessed)</td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.Notes)</th>
        <td colspan="3">@Html.DisplayFor(model => model.Notes)</td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.Data)</th>
        <td colspan="3">
            @if (!String.IsNullOrEmpty(Model.Data))
            {
                <pre id="output"></pre>
            }
        </td>
    </tr>
</table>

@if (Model.Request != null)
{
    @Html.DisplayFor(model => model.Request);
}

@if (Model.AuditDetails != null && Model.AuditDetails.Count > 0)
{
    @Html.DisplayFor(model => model.AuditDetails, "AuditDetail");
}

@section Scripts{
    <script>
    function syntaxHighlight(json) {
        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            var cls = 'number';
            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    cls = 'key';
                } else {
                    cls = 'string';
                }
            } else if (/true|false/.test(match)) {
                cls = 'boolean';
            } else if (/null/.test(match)) {
                cls = 'null';
            }
            return '<span class="' + cls + '">' + match + '</span>';
        });
    }

        $(function () {
            if ('@Html.Raw(Model.Data)' != '') {
                var str = JSON.stringify(JSON.parse('@Html.Raw(Model.Data)'), undefined, 4);
                $("#output").html(syntaxHighlight(str));
            }
        });

    </script>

}