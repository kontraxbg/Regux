@model Kontrax.Regux.Model.Audit.AuditViewModel

@{
    ViewBag.Title = "Одит";
}
<style>
    pre {
        outline: 1px solid #ccc;
        padding: 5px;
        margin: 5px;
    }

    .string {
        color: green;
    }

    .number {
        color: darkorange;
    }

    .boolean {
        color: blue;
    }

    .null {
        color: magenta;
    }

    .key {
        color: red;
    }
</style>


<table class="table table-striped table-hover">
    <tr>
        <th>@Html.DisplayNameFor(model => model.TimeAccessed)</th>
        <td>@Html.DisplayFor(model => model.TimeAccessed)</td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.Duration)</th>
        <td>@Html.DisplayFor(model => model.Duration)</td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.UserName)</th>
        <td><a asp-controller="Account" asp-action="Details" asp-route-UserId="@Model.UserID">@Model.UserName</a></td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.URLAccessed)</th>
        <td>@Html.DisplayFor(model => model.URLAccessed)</td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.IPAddress)</th>
        <td>@Html.DisplayFor(model => model.IPAddress)</td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.Activity)</th>
        <td>@Html.DisplayFor(model => model.Activity)</td>
    </tr>

    <tr>
        <th>@Html.DisplayNameFor(model => model.Controller)</th>
        <td>@Html.DisplayFor(model => model.Controller)</td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.Action)</th>
        <td>@Html.DisplayFor(model => model.Action)</td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.RequestMethod)</th>
        <td>@Html.DisplayFor(model => model.RequestMethod)</td>
    </tr>
    <tr>
        <th>@Html.DisplayNameFor(model => model.Data)</th>
        <td>
            @if (!String.IsNullOrEmpty(Model.Data))
            {
                <pre id="output"></pre>
            }
        </td>
    </tr>
</table>

@section Scripts{
    <script>
    function syntaxHighlight(json) {
        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            var cls = 'number';
            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    cls = 'key';
                } else {
                    cls = 'string';
                }
            } else if (/true|false/.test(match)) {
                cls = 'boolean';
            } else if (/null/.test(match)) {
                cls = 'null';
            }
            return '<span class="' + cls + '">' + match + '</span>';
        });
    }

        $(function () {
            if ('@Html.Raw(Model.Data)' != '') {
                var str = JSON.stringify(JSON.parse('@Html.Raw(Model.Data)'), undefined, 4);
                $("#output").html(syntaxHighlight(str));
            }
        });

    </script>

}